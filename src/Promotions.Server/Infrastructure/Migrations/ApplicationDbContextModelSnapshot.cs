// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Promotions.Goods", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("PictureId")
                        .HasColumnType("uuid")
                        .HasColumnName("picture_id");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.HasKey("Id")
                        .HasName("pk_goods");

                    b.HasIndex("PictureId")
                        .HasDatabaseName("ix_goods_picture_id");

                    b.ToTable("goods", (string)null);
                });

            modelBuilder.Entity("Domain.Promotions.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.HasKey("Id")
                        .HasName("pk_managers");

                    b.ToTable("managers", (string)null);
                });

            modelBuilder.Entity("Domain.Promotions.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_id");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("PartnerId")
                        .HasDatabaseName("ix_orders_partner_id");

                    b.HasIndex("PromotionId")
                        .HasDatabaseName("ix_orders_promotion_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Domain.Promotions.OrderGoods", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Count")
                        .HasColumnType("numeric")
                        .HasColumnName("count");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid?>("GoodsId")
                        .HasColumnType("uuid")
                        .HasColumnName("goods_id");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.HasKey("Id")
                        .HasName("pk_order_goods");

                    b.HasIndex("GoodsId")
                        .HasDatabaseName("ix_order_goods_goods_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_goods_order_id");

                    b.ToTable("order_goods", (string)null);
                });

            modelBuilder.Entity("Domain.Promotions.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.HasKey("Id")
                        .HasName("pk_partner");

                    b.ToTable("partner", (string)null);
                });

            modelBuilder.Entity("Domain.Promotions.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<string>("MongoId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mongo_id");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.HasKey("Id")
                        .HasName("pk_pictures");

                    b.ToTable("pictures", (string)null);
                });

            modelBuilder.Entity("Domain.Promotions.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Basement")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("basement");

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("conditions");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_start");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean")
                        .HasColumnName("enable");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("header");

                    b.Property<Guid?>("LogoPictureId")
                        .HasColumnType("uuid")
                        .HasColumnName("logo_picture_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SpecialConditions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("special_conditions");

                    b.Property<string>("SpecialConditions2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("special_conditions2");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.HasKey("Id")
                        .HasName("pk_promotions");

                    b.HasIndex("LogoPictureId")
                        .HasDatabaseName("ix_promotions_logo_picture_id");

                    b.ToTable("promotions", (string)null);
                });

            modelBuilder.Entity("Domain.Promotions.PromotionGoods", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("GoodsDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("goods_description");

                    b.Property<Guid?>("GoodsId")
                        .HasColumnType("uuid")
                        .HasColumnName("goods_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("PromotionDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("promotion_description");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_id");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<string>("VendorCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vendor_code");

                    b.HasKey("Id")
                        .HasName("pk_promotion_goods");

                    b.HasIndex("GoodsId")
                        .HasDatabaseName("ix_promotion_goods_goods_id");

                    b.HasIndex("PromotionId")
                        .HasDatabaseName("ix_promotion_goods_promotion_id");

                    b.ToTable("promotion_goods", (string)null);
                });

            modelBuilder.Entity("Domain.Promotions.SendPromotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_id");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.HasKey("Id")
                        .HasName("pk_send_promotions");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("ix_send_promotions_manager_id");

                    b.HasIndex("PartnerId")
                        .HasDatabaseName("ix_send_promotions_partner_id");

                    b.HasIndex("PromotionId")
                        .HasDatabaseName("ix_send_promotions_promotion_id");

                    b.ToTable("send_promotions", (string)null);
                });

            modelBuilder.Entity("Domain.Promotions.Goods", b =>
                {
                    b.HasOne("Domain.Promotions.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId")
                        .HasConstraintName("fk_goods_pictures_picture_id");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("Domain.Promotions.Order", b =>
                {
                    b.HasOne("Domain.Promotions.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .HasConstraintName("fk_orders_partner_partner_id");

                    b.HasOne("Domain.Promotions.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("fk_orders_promotions_promotion_id");

                    b.Navigation("Partner");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Domain.Promotions.OrderGoods", b =>
                {
                    b.HasOne("Domain.Promotions.Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .HasConstraintName("fk_order_goods_goods_goods_id");

                    b.HasOne("Domain.Promotions.Order", null)
                        .WithMany("OrderGoods")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_order_goods_orders_order_id");

                    b.Navigation("Goods");
                });

            modelBuilder.Entity("Domain.Promotions.Promotion", b =>
                {
                    b.HasOne("Domain.Promotions.Picture", "LogoPicture")
                        .WithMany()
                        .HasForeignKey("LogoPictureId")
                        .HasConstraintName("fk_promotions_pictures_logo_picture_id");

                    b.Navigation("LogoPicture");
                });

            modelBuilder.Entity("Domain.Promotions.PromotionGoods", b =>
                {
                    b.HasOne("Domain.Promotions.Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .HasConstraintName("fk_promotion_goods_goods_goods_id");

                    b.HasOne("Domain.Promotions.Promotion", null)
                        .WithMany("PromotionGoods")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("fk_promotion_goods_promotions_promotion_id");

                    b.Navigation("Goods");
                });

            modelBuilder.Entity("Domain.Promotions.SendPromotion", b =>
                {
                    b.HasOne("Domain.Promotions.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("fk_send_promotions_managers_manager_id");

                    b.HasOne("Domain.Promotions.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .HasConstraintName("fk_send_promotions_partner_partner_id");

                    b.HasOne("Domain.Promotions.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("fk_send_promotions_promotions_promotion_id");

                    b.Navigation("Manager");

                    b.Navigation("Partner");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Domain.Promotions.Order", b =>
                {
                    b.Navigation("OrderGoods");
                });

            modelBuilder.Entity("Domain.Promotions.Promotion", b =>
                {
                    b.Navigation("PromotionGoods");
                });
#pragma warning restore 612, 618
        }
    }
}
